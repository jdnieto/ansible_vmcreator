- name: Create VMS
  hosts: workstation
  gather_facts: False
  become: True
  vars_files:
    - vars/tower.yaml

  tasks:
    - name: create Network
      virt_net:
        command: define
        name: "{{ vmnet.netname }}"
        xml: "{{ lookup('template', 'templates/net.xml.j2') }}"

    - name: start Network
      virt_net:
        name: "{{ vmnet.netname }}"
        state: active

    - name: create VM Disks
      shell: qemu-img create -f qcow2 -b "{{ template_disk }}" "{{ item.key }}".qcow2 chdir="{{ vmdir }}"
      loop: "{{ vms | dict2items }}"

    - name: inject network-config
      shell: >
        virt-customize -a  "{{ vmdir }}"/"{{ item.key }}".qcow2 
        --run-command 'echo "{{ item.key }}.{{ vmnet.domain }}"' > /etc/hostname
      loop: "{{ vms | dict2items }}"

    - name: create Additional Disks
      shell: qemu-img create -f qcow2 "{{ item.key }}"_addisk.qcow2 "{{ item.value.addisk }}"G chdir="{{ diskdir }}"
      when: item.value.addisk is defined
      loop: "{{ vms | dict2items }}"

    - name: Create VMs
      virt: 
        name: "{{ item.key }}-{{ project }}"
        command: define
        xml: "{{ lookup('template', 'templates/vm_xml.j2') }}"
      loop: "{{ vms | dict2items }}"

    - name: Start VMs
      virt: 
        name: "{{ item.key }}-{{ project }}"
        state: running
      loop: "{{ vms | dict2items }}"

    - name: Add host to play
      add_host:
        hostname: "{{ vmnet.net }}.{{ item.value.id }}"
        groups:
          - tower
      loop: "{{ vms | dict2items }}"
    
    - name: wait for boot
      pause:
          seconds: 10

- name: Register Tower
  hosts: tower
  remote_user: root
  gather_facts: false
  vars_files:
    - vars/ikyk.yaml
  tasks:
    - name: subscribe tower
      redhat_subscription:
        username: "{{ rhn_username }}"
        password: "{{ rhn_password }}"
        pool_ids: "{{ rhn_pool }}"
        state: present
    
    - name: add ansible repo repo
      rhsm_repository:
        name: "{{ ansible_repo }}"
        state: present
    
    - name: install ansible
      dnf:
        name: ansible
        state: latest
    
    - name: download tower installer
      get_url:
        url: "https://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-latest.tar.gz"
        dest: "/root/ansible-tower-setup-latest.tar.gz"

    - name: configure that
      copy:
        dest: "/root/that.txt"
        content: "{{ that }}"

    - name: configure instructions
      copy:
        dest: "/root/instructions.txt"
        content: "{{ other_that }}"
          
- name: Create DNSMASQ
  hosts: tower
  remote_user: root
  gather_facts: true
  vars_files:
    - vars/machines.yaml
  tasks:
    - name: install dnsmasq
      dnf:
        name: dnsmasq
        state: latest

    - name: configure NetworkManager to use dnsmasq
      lineinfile:
        path: /etc/NetworkManager/NetworkManager.conf
        state: present
        insertafter: '^\[main\]'
        line: 'dns=dnsmasq'
    
    - name: create {{ vmnet.net }}.conf file
      copy:
        dest: /etc/NetworkManager/dnsmasq.d/{{ vmnet.netname }}.conf
        content: |
          #server={{ ansible_facts['default_ipv4']['gateway']}}
          server=8.8.8.8
          server=/{{ vmnet.domain }}/{{ vmnet.gateway }}
    
    - name: reload NetworkManager
      systemd:
        name: NetworkManager
        state: reloaded